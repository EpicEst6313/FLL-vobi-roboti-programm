import motor, motor_pair, runloop, color_sensor, math
from hub import port, button, light_matrix

varvi_andm = {}
kalib_tehtud = False

MISSIOONI_ARV = 3
RATTA_D = 5.6
RATASTE_VAH_KAUGUS = 11.3
TEISENDUS_TEGUR = 0.6

motor_pair.pair(motor_pair.PAIR_1, port.B, port.A)


def vektor(cal_punkt:tuple[int], moot_punkt:tuple[int, int, int, int]):
    """
    arvutab vektori antud listidele järgi ning annab selle kauguse vahe

    ### Parameetrid:
    - **cal_punkt** (`list[int]`):
        4-elementiline arvude list, mis esindab kalibreerimispunkti koordinaate.
        Kõik väärtused tõstetakse ruutu.

    - **moot_punkt** (`list[int]`):
        4-elementiline arvude list, mille väärtused saadakse värviandurilt tõstetakse ruutu.
        Sellest lahutatakse maha 'cal_punkt', mis on ruutu tõstetud.

    ### Tagastab:
    - **int** – vektori kauguse võrreldavast vektorist.

    """
    vektor = []

    for i in range(4):
        vektor.append((moot_punkt[i] - cal_punkt[i]) ** 2)
    
    return sum(vektor)


async def paar1_soitmine(pooramine:int, kiirus:int, kraadid:int, stop:bool=False,kiirendus:int=750, aeglustus:int=750):
    """
    Spike enda definitsiooni kohendus et oleks kergem robotit sõitma panna

    ### Parameetrid:
    - **pooramine** (`int`):
        Väärtus vahemikus **-100 kuni 100**, mis määrab mootori pööramise suuna ja kiiruse.
        - **Negatiivne** – pöörab vasakule
        - **Positiivne** – pöörab paremale

    - **kiirus** (`int`):
        Mootori kiirus. Täpsed piirangud sõltuvad SPIKE dokumentatsioonist.

    - **kraadid** (`int`):
        Pööratavate kraadide arv:
        - `0` – pöörab lõputult, kuni käsitsi peatatakse
        - Positiivne väärtus – pöörab määratud kraadide võrra

    - **stop** (`bool`, vaikimisi `False`):
        Kui `True`, peatab mootori enne uue liikumise alustamist.

    - **kiirendus** (`int`, vaikimisi `750`):
        Kiirenduse väärtus. Vaata SPIKE dokumentatsioonist maksimaalset lubatud väärtust.

    - **aeglustus** (`int`, vaikimisi `750`):
        Aeglustuse väärtus. Vaata SPIKE dokumentatsioonist maksimaalset lubatud väärtust.

    """
    if stop:
        motor_pair.stop(motor_pair.PAIR_1)

    if kraadid == 0:
        motor_pair.move(motor_pair.PAIR_1, pooramine, velocity=kiirus)

    else:
        await motor_pair.move_for_degrees(motor_pair.PAIR_1, round(kraadid/TEISENDUS_TEGUR),pooramine,velocity=kiirus ,acceleration=kiirendus, deceleration=aeglustus)


async def pooramine(poor_kraadid:int, vas_mot:int=50, par_mot:int=50, kiirendus:int=500, aeglustus:int=500, kiirus:int=1050):
    """
    võtab int kraade ja pöörab nende järgi ning mootorite võimsuse erinevusel arvutab mis kiirusega kumbki mootor sõitma peaks

    ### Parameetrid:
    - **poor_kraadid** (`int`):
        Pöördenurk kraadides.
        - **Positiivne väärtus** – pöörab vasakule
        - **Negatiivne väärtus** – pöörab paremale

    - **vas_mot** (`int`, vaikimisi `50`):
        Vasaku ratta võimsus protsentides (**0–100**).
        - `0%` – ainult parem ratas pöörab
        - `50%` – mõlemad rattad pööravad võrdselt
        - `100%` – ainult vasak ratas pöörab

    - **par_mot** (`int`, vaikimisi `50`):
        Parema ratta võimsus protsentides (**0–100**).
        - `0%` – ainult vasak ratas pöörab
        - `50%` – mõlemad rattad pööravad võrdselt
        - `100%` – ainult parem ratas pöörab

    - **kiirendus** (`int`, vaikimisi `500`):
        Mootori kiirenduse väärtus.

    - **aeglustus** (`int`, vaikimisi `500`):
        Mootori aeglustuse väärtus.

    - **kiirus** (`int`, vaikimisi `1050`):
        Maksimaalne mootori kiirus pööramise ajal.

    """

    #arvutab pööramise kraadides
    pöörde_pikkus = math.pi*2*RATASTE_VAH_KAUGUS*(poor_kraadid/360)
    mootori_kraadid = pöörde_pikkus/(math.pi*RATTA_D*(1/360))
    parem_ratta_poor = (mootori_kraadid*par_mot/100)/0.6
    vasak_ratta_poor = (mootori_kraadid*vas_mot/100)/0.6

    #kui mõlemad on 50 50 siis paneb lihtsalt liikuma
    if(vas_mot == 50 and par_mot == 50):
        motor.run_for_degrees(port.B, round(parem_ratta_poor),kiirus, acceleration=kiirendus, deceleration=aeglustus)
        await motor.run_for_degrees(port.A, round(vasak_ratta_poor),kiirus, acceleration=kiirendus, deceleration=aeglustus)

    # kui vasak mootor pöörab % vähem siis arvutab parema mootori järgi kiiruse ja kontrollib et mõlema % oleks 100%
    elif(vas_mot < 50 and par_mot > 50 and vas_mot + par_mot == 100):
        par_mot_aeg = parem_ratta_poor/kiirus
        vasak_ratta_kiirus = vasak_ratta_poor/par_mot_aeg
        motor.run_for_degrees(port.A, round(vasak_ratta_poor),round(vasak_ratta_kiirus), acceleration=kiirendus, deceleration=aeglustus)
        await motor.run_for_degrees(port.B, round(parem_ratta_poor),kiirus, acceleration=kiirendus, deceleration=aeglustus)

    # kui parem mootor pöörab % vähem siis arvutab parema mootori järgi kiiruse
    elif(vas_mot > 50 and par_mot < 50 and vas_mot + par_mot == 100):
        vas_mot_aeg = vasak_ratta_poor/kiirus
        parem_ratta_kiirus = parem_ratta_poor/vas_mot_aeg
        motor.run_for_degrees(port.B, round(parem_ratta_poor),round(parem_ratta_kiirus), acceleration=kiirendus, deceleration=aeglustus)
        await motor.run_for_degrees(port.A, round(vasak_ratta_poor),kiirus, acceleration=kiirendus, deceleration=aeglustus)

    # kui % on valesti pandud ja mootorid ei saa pöörata nt on 46 ja 27
    else:
        print("võimsused valesti jaotatud")


async def varvi_kalib():
    """
    paneb roboti külge ühendatud värvi anduri mõõtma kümme korda ühte värvi moodulit ja arvutab keskmise
    kordab seda nii palju kui on konstantis MISSIOONI_ARV numbreid kokku.

    pärast seda ootab nupu vajutust parem kinnitab kalibratsiooni ja vasak tühistab kalibratsiooni ning enne kui funktsioon lõpetab ootab et nupp oleks lahti lastud

    """
    global varvi_andm, kalib_tehtud

    for i in range(1, MISSIOONI_ARV + 1):
        light_matrix.write(str(i))

        # Oota, kuni vasak nupp vajutatakse
        while not button.pressed(button.LEFT):
            await runloop.sleep_ms(10)
        while button.pressed(button.LEFT):
            await runloop.sleep_ms(10)

        # Kogub andmeid 10 korda ja arvutab keskmise
        punane_kogu_sum = 0
        roheline_kogu_sum = 0
        sinine_kogu_sum = 0
        tugevus_kogu_sum = 0

        for j in range(10):
            punane, roheline, sinine, tugevus = color_sensor.rgbi(port.D)
            punane_kogu_sum += punane
            roheline_kogu_sum += roheline
            sinine_kogu_sum += sinine
            tugevus_kogu_sum += tugevus
            await runloop.sleep_ms(100)

        # Arvuta keskmised väärtused
        punane_kesk = punane_kogu_sum / 10
        roheline_kesk = roheline_kogu_sum / 10
        sinine_kesk = sinine_kogu_sum / 10
        tugevus_kesk = tugevus_kogu_sum / 10

        # Salvestab andmed
        varvi_andm[i] = [punane_kesk, roheline_kesk, sinine_kesk, tugevus_kesk]

    # Küsib kinnitust või tühistamist
    light_matrix.write("ok?")
    while True:
        if button.pressed(button.RIGHT):
            kalib_tehtud = True
            break
        elif button.pressed(button.LEFT):
            kalib_tehtud = False
            break

    # Oota, kuni nupud vabastatakse
    while button.pressed(button.LEFT) or button.pressed(button.RIGHT):
        await runloop.sleep_ms(10)


def varvi_tuvastus():
    """
    Tuvastab, milline värvimoodul on robotile peale panud(käies läbi listi kalbireeritud moodulitest), kasutades funktsiooni vektor
    ja paneb listi numbrid ning vaatab väikseima nr indexi ning see moodul on peale pandud ja tagastab numbri


    Tagastusväärtus:
    int – tuvastatud värvimooduli number (1, 2, 3, …).

    """
    varv = color_sensor.rgbi(port.D)# Loeb värvisensorilt andmed
    vektori_kaugus = []

    # Arvuta kaugused kalibreeritud andmetest
    for i in varvi_andm.keys():
        vektori_kaugus.append(vektor(varvi_andm[i], varv))

    # Kui minimaalne kaugus jääb alla määratud piiri, tagasta värvi ID
    return vektori_kaugus.index(min(vektori_kaugus)) + 1


async def soit_1():
    """
    Käivitab esimese missiooni, juhib roboti liikumist ja pööramist vastavalt ettenähtud ülesandele
    info sõidu kohta leiab drivest sõitude kaustast või roboti disaini dokumentatsioonist soit_1 mime alt

    """
    await paar1_soitmine(0, 1050, 200)
    await pooramine(40)

    #algussättimne
    await paar1_soitmine(0, 1050, 1075)
    await motor.run_for_degrees(port.F, 100, 1000)
    await pooramine(-96)

    #lineup haile
    await paar1_soitmine(0, 1050, 650)
    await paar1_soitmine(0, 1050, -405)

    #lineup korallile
    await pooramine(145)
    await paar1_soitmine(0, 1050, -575)
    await motor.run_for_degrees(port.E, -100, 1000)
    await runloop.sleep_ms(500)
    await paar1_soitmine(0, 1050, 300)
    await pooramine(-55)
    await paar1_soitmine(0, 1050, -1500)

    #paneb mootori teiseks sõiduks valmis
    await motor.run_to_absolute_position(port.E, 315, -300)
    motor.stop(port.E)

async def soit_2():
    """
    Käivitab teine missiooni, juhib roboti liikumist ja pööramist vastavalt ettenähtud ülesandele
    info sõidu kohta leiab drivest sõitude kaustast või roboti disaini dokumentatsioonist soit_2 mime alt

    """
    motor.stop(port.E)

    #läheb paadi purje ja aarde laegast varastama ja viib sukelduja ära
    await paar1_soitmine(0, 1050, 910)
    await pooramine(47)
    await paar1_soitmine(0, 1050, 300)
    await pooramine(47)
    await paar1_soitmine(0, 1000, 1200, aeglustus=2000)
    await motor.run_for_degrees(port.F, 105, 350)
    await runloop.sleep_ms(2000)
    await motor.run_for_degrees(port.E, -75, 550)
    await runloop.sleep_ms(1000)
    motor.run_for_degrees(port.E, 60, 100)
    await paar1_soitmine(-13, -1050, 1750)

async def soit_3():
    """
    Käivitab kolmanda missiooni, juhib roboti liikumist ja pööramist vastavalt ettenähtud ülesandele
    info sõidu kohta leiab drivest sõitude kaustast või roboti disaini dokumentatsioonist soit_3 mime alt

    """

    #viib hai ära
    await paar1_soitmine(0, 1050, 100)
    await pooramine(60)
    await paar1_soitmine(0, 1050, 1400)

    # võtab 4 jala ära ja läheb teise kodu alasse
    await paar1_soitmine(0, 1050, -400)
    await pooramine(45)
    await paar1_soitmine(0, 1050, 1750)
    await pooramine(50)
    await paar1_soitmine(0, 1050, -700)
    await paar1_soitmine(0, 1050, 1100)

async def soit_4():
    """
    Käivitab neljanda missiooni, juhib roboti liikumist ja pööramist vastavalt ettenähtud ülesandele
    info sõidu kohta leiab drivest sõitude kaustast või roboti disaini dokumentatsioonist soit_4 mime alt
    """
    #lükkab kala ära
    await paar1_soitmine(0, 1050, 200)
    await pooramine(-54)
    await paar1_soitmine(2, 1050, 2100)
    await pooramine(58)

    # võtab ära vee proovi
    await paar1_soitmine(0, 1050, 800)
    await paar1_soitmine(0, 1050, -520)
    await paar1_soitmine(0, 1050, 200)
    await pooramine(90)
    await paar1_soitmine(0, 1050, 700)
    await pooramine(45)
    await paar1_soitmine(0, 1050, 300)
    await paar1_soitmine(0, -1050, 700, kiirendus=10000000, aeglustus=100000000)
    await paar1_soitmine(0, 1050, 400)
    await pooramine(45)
    await paar1_soitmine(0, 1050, -1000)
    await paar1_soitmine(0, 1050, 500)
    await pooramine(-45)
    await paar1_soitmine(0, 1050, 700)
    await pooramine(45)
    await paar1_soitmine(0, 1050, 1500)

# peamine meetod mis kasutab teisi meetodeid et lahendada ülessandeid vaatab kas värvid on kalibreeritud ja kui ei ole siis kalibreerib ära
async def soidu_tuvastus():
    """
    Peamine meetod, mis juhib ülesannete lahendamist värvituvastuse põhjal.
    kontrollib kas värvituvastus on tehtud kui ei siis teeb ja selle õnestumisl naaseb
    loopis kalibratsioon tehtud ning hakkab vaatama mis moodul on peale pandud ning nupu vajutusel paneb selle tööle
    """
    while True:
        #kontrollib kas on kalibreeritud
        if kalib_tehtud:
            #kontrollib milline missioon on või kas moodul puudub
            if (varvi_tuvastus() == 0):
                    light_matrix.write("!")
                    print("pole sõitu")
                    await runloop.sleep_ms(20)
            if (varvi_tuvastus() == 1):
                light_matrix.write(str(1))
                if(button.pressed(button.LEFT)):
                    await soit_1()
            if (varvi_tuvastus() == 2):
                light_matrix.write(str(2))
                if(button.pressed(button.LEFT)):
                    await soit_2()
            if (varvi_tuvastus() == 3):
                light_matrix.write(str(3))
                if(button.pressed(button.LEFT)):
                    await soit_3()
            if (varvi_tuvastus() == 4):
                light_matrix.write(str(4))
                print("sõit 4")
                if(button.pressed(button.LEFT)):
                    await soit_4()
            if (varvi_tuvastus() == 5):
                light_matrix.write(str(5))
                if(button.pressed(button.LEFT)):
                    print('veel üks soit?')
        # kui ei ole kalibreeritud siis kalibreerib
        else:
            await varvi_kalib()

#motor.run_to_absolute_position(port.E, 315, -300)
runloop.run(soit_4())
